import { addAll } from './add_all';
import { deleteBranch, forceCheckoutNewBranch, forceCreateBranch, getCurrentBranchName, moveBranch, switchBranch } from './branch_ops';
import { commit } from './commit';
import { getCommitRange } from './commit_range';
import { getCommitTree } from './commit_tree';
import { detectStagedChanges, getUnstagedChanges, showDiff, isDiffEmpty } from './diff';
import { fetchBranch, readFetchBase, readFetchHead, writeFetchBase } from './fetch_branch';
import { findRemoteBranch } from './find_remote_branch';
import { getUserEmail } from './get_email';
import { getShaOrThrow, getSha } from './get_sha';
import { getGitEditor, getGitPager } from './git_editor';
import { unstagedChanges, trackedUncommittedChanges } from './git_status_utils';
import { isMerged } from './is_merged';
import { logLong } from './log';
import { getMergeBase } from './merge_base';
import { getUnmergedFiles, getRebaseHead } from './merge_conflict_help';
import { pruneRemote } from './prune_remote';
import { pullBranch } from './pull_branch';
import { pushBranch } from './push_branch';
import { rebase, rebaseContinue, rebaseAbort, rebaseInteractive } from './rebase';
import { rebaseInProgress } from './rebase_in_progress';
import { hardReset, softReset, trackedReset } from './reset_branch';
import { setRemoteTracking } from './set_remote_tracking';
import { showCommits } from './show_commits';
import { getBranchNamesAndRevisions } from './sorted_branch_names';
export declare type TGit = ReturnType<typeof composeGitInternal>;
export declare function composeGit(): TGit;
declare function composeGitInternal(): {
    addAll: typeof addAll;
    getCurrentBranchName: typeof getCurrentBranchName;
    moveBranch: typeof moveBranch;
    deleteBranch: typeof deleteBranch;
    switchBranch: typeof switchBranch;
    forceCheckoutNewBranch: typeof forceCheckoutNewBranch;
    forceCreateBranch: typeof forceCreateBranch;
    getCommitRange: typeof getCommitRange;
    getCommitTree: typeof getCommitTree;
    commit: typeof commit;
    detectStagedChanges: typeof detectStagedChanges;
    getUnstagedChanges: typeof getUnstagedChanges;
    showDiff: typeof showDiff;
    isDiffEmpty: typeof isDiffEmpty;
    fetchBranch: typeof fetchBranch;
    readFetchHead: typeof readFetchHead;
    readFetchBase: typeof readFetchBase;
    writeFetchBase: typeof writeFetchBase;
    findRemoteBranch: typeof findRemoteBranch;
    getUserEmail: typeof getUserEmail;
    getShaOrThrow: typeof getShaOrThrow;
    getSha: typeof getSha;
    getGitEditor: typeof getGitEditor;
    getGitPager: typeof getGitPager;
    unstagedChanges: typeof unstagedChanges;
    trackedUncommittedChanges: typeof trackedUncommittedChanges;
    isMerged: typeof isMerged;
    logLong: typeof logLong;
    getMergeBase: typeof getMergeBase;
    getUnmergedFiles: typeof getUnmergedFiles;
    getRebaseHead: typeof getRebaseHead;
    pruneRemote: typeof pruneRemote;
    showCommits: typeof showCommits;
    pullBranch: typeof pullBranch;
    pushBranch: typeof pushBranch;
    rebaseInProgress: typeof rebaseInProgress;
    rebase: typeof rebase;
    rebaseContinue: typeof rebaseContinue;
    rebaseAbort: typeof rebaseAbort;
    rebaseInteractive: typeof rebaseInteractive;
    softReset: typeof softReset;
    hardReset: typeof hardReset;
    trackedReset: typeof trackedReset;
    setRemoteTracking: typeof setRemoteTracking;
    getBranchNamesAndRevisions: typeof getBranchNamesAndRevisions;
    populateRemoteShas: (remote: string) => Promise<void>;
    getRemoteSha: (branchName: string) => string | undefined;
};
export {};
